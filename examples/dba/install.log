To proceed, you will have to connect to the database as a DBA.

Enter a user name that can connect to the database as a DBA: system@jjflash-eval
Enter the DBA password: 
Connected.

Enter the name of the user that owns the DbTwig schema [dbtwig]: 


We need to create a user to own the DbTwig Example schema
Enter the name of the DbTwig Example schema owner [dbtwig_example]: 


Enter a password for the DbTwig Example schema owner: 


Enter the name of the user that owns the AsterionDB schema [asteriondb_dgbunker]: 

SQL> 
SQL> rem
SQL> rem  Note how we are granting privileges to the DbTwig Example schema.  In a
SQL> rem  production environment you would not be granting all of these privileges
SQL> rem  (normally).  As discussed in the DbTwig documentation, in a production
SQL> rem  environment the actual schema owners can not connect to the database and
SQL> rem  have very few, if any, privileges granted to them.  But here, you are
SQL> rem  going to be doing development work.  Therefore, you will need to connect
SQL> rem  to the database as a regular developer would.
SQL> rem
SQL> 
SQL> declare
  2  
  3  	 l_sql_text			   clob;
  4  	 l_default_tablespace		   database_properties.property_value%type;
  5  
  6  begin
  7  
  8  	 select  property_value
  9  	   into  l_default_tablespace
 10  	   from  database_properties
 11  	  where  property_name = 'DEFAULT_PERMANENT_TABLESPACE';
 12  
 13  	 l_sql_text := 'create user &&tutorials_user identified by "&&tutorials_password"';
 14  	 execute immediate l_sql_text;
 15  
 16  	 l_sql_text := 'grant create session, create table, create procedure to &&tutorials_user';
 17  	 execute immediate l_sql_text;
 18  
 19  	 l_sql_text := 'alter user &&tutorials_user quota 50M on '||l_default_tablespace;
 20  	 execute immediate l_sql_text;
 21  
 22  end;
 23  .
SQL> /

PL/SQL procedure successfully completed.

SQL> 
SQL> rem
SQL> rem  Setup the DbTwig Example user so that it can make calls to the AsterionDB
SQL> rem  API by using DbTwig.
SQL> rem
SQL> 
SQL> grant execute on &&dbtwig_user..db_twig to &&tutorials_user;

Grant succeeded.

SQL> 
SQL> create synonym &&tutorials_user..db_twig for &&dbtwig_user..db_twig;

Synonym created.

SQL> 
SQL> alter session set current_schema = &&dbtwig_user;

Session altered.

SQL> 
SQL> rem
SQL> rem  Setup DbTwig so that it knows about the dbTwigExample service.
SQL> rem
SQL> 
SQL> delete  from db_twig_services
  2   where  service_name = 'dbTwigExample';

0 rows deleted.

SQL> 
SQL> insert into db_twig_services
  2    (service_name, service_owner, production_mode, session_validation_procedure, api_error_handler)
  3  values ('dbTwigExample', '&&tutorials_user', 'Y', 'dbtwig_example.validate_session', 'dbtwig_example.restapi_error');

1 row created.

SQL> 
SQL> alter session set current_schema = &&tutorials_user;

Session altered.

SQL> 
SQL> rem
SQL> rem  Create the middle-tier map.
SQL> rem
SQL> 
SQL> @@../../dba/middleTierMap
SQL> create table middle_tier_map
  2  (
  3    entry_point			 varchar2(128) primary key,
  4    object_type			 varchar2(9) not null
  5  	 constraint object_type_check check (object_type in ('function', 'procedure')),
  6    object_name			 varchar2(128) not null,
  7    object_group			 varchar2(128) not null,
  8    required_authorization_level	 varchar2(13) default 'administrator' not null
  9  	 constraint required_auth_level_chk check (required_authorization_level in ('administrator', 'user', 'guest', 'none')),
 10    allow_blocked_session varchar2(1) default 'N' not null
 11  	 constraint allow_blocked_chk check (allow_blocked_session in ('Y', 'N'))
 12  );

Table created.

SQL> 
SQL> rem
SQL> rem  Insert our middle-tier map entries.
SQL> rem
SQL> 
SQL> @@dbTwigData
SQL> insert into middle_tier_map values ('editSpreadsheet', 'procedure', 'dbtwig_example.edit_spreadsheet', 'dbTwigExample', 'none', 'N');

1 row created.

SQL> insert into middle_tier_map values ('getMaintenanceManualDetail', 'function', 'dbtwig_example.get_maintenance_manual_detail', 'dbTwigExample', 'none', 'N');

1 row created.

SQL> insert into middle_tier_map values ('getMaintenanceManuals', 'function', 'dbtwig_example.get_maintenance_manuals', 'dbTwigExample', 'none', 'N');

1 row created.

SQL> insert into middle_tier_map values ('getSupportInfo', 'function', 'dbtwig_example.get_support_info', 'dbTwigExample', 'none', 'N');

1 row created.

SQL> insert into middle_tier_map values ('restApiError', 'function', 'dbtwig_example.error_handler', 'dbTwigExample', 'none', 'N');

1 row created.

SQL> insert into middle_tier_map values ('saveTechNote', 'procedure', 'dbtwig_example.save_tech_note', 'dbTwigExample', 'none', 'N');

1 row created.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> create table maintenance_manuals
  2  (manual_id 				     number(6) primary key,
  3   manufacturer			     varchar2(60),
  4   in_service_from			     date,
  5   revision_number			 number(8),
  6   maintenance_division		     varchar2(128),
  7   maintenance_manual_filename	 varchar2(128),
  8   spreadsheet_id			 varchar2(32));

Table created.

SQL> 
SQL> create table major_assembly_photos
  2  (manual_id 				 number(6)
  3  	references maintenance_manuals(manual_id),
  4   filename					 varchar2(128));

Table created.

SQL> 
SQL> create table technician_notes
  2  (manual_id 			 number(6)
  3  	references maintenance_manuals(manual_id),
  4   tech_note 			 varchar2(256));

Table created.

SQL> 
SQL> create sequence tutorials_seq minvalue 1 maxvalue 999999 cycle start with 1;

Sequence created.

SQL> 
SQL> begin
  2  
  3    insert into maintenance_manuals
  4  	 (manual_id, manufacturer, maintenance_division, in_service_from, revision_number, maintenance_manual_filename)
  5    values
  6  	 (tutorials_seq.nextval, 'General Electric', 'Compressor Servicing', '27-JUL-2010', 100, 'assets/pdfs/compressor.pdf');
  7  
  8    insert into maintenance_manuals
  9  	 (manual_id, manufacturer, maintenance_division, in_service_from, revision_number, maintenance_manual_filename)
 10    values
 11  	 (tutorials_seq.nextval, 'Teledyne', 'Turbine Servicing', '30-SEP-2012', 22, 'assets/pdfs/turbine.pdf');
 12  
 13    insert into major_assembly_photos
 14  	 select  manual_id, 'assets/images/compressor_1.jpg'
 15  	   from  maintenance_manuals
 16  	  where  manufacturer = 'General Electric';
 17  
 18    insert into major_assembly_photos
 19  	 select  manual_id, 'assets/images/compressor_2.jpg'
 20  	   from  maintenance_manuals
 21  	  where  manufacturer = 'General Electric';
 22  
 23    insert into major_assembly_photos
 24  	 select  manual_id, 'assets/images/turbine_1.jpg'
 25  	   from  maintenance_manuals
 26  	  where  manufacturer = 'Teledyne';
 27  
 28    insert into major_assembly_photos
 29  	 select  manual_id, 'assets/images/turbine_2.jpg'
 30  	   from  maintenance_manuals
 31  	  where  manufacturer = 'Teledyne';
 32  
 33  end;
 34  .
SQL> /

PL/SQL procedure successfully completed.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> @dbtwig_example
SQL> create or replace
  2  package dbtwig_example as
  3  
  4    procedure edit_spreadsheet
  5    (
  6  	 p_json_parameters		   json_object_t
  7    );
  8  
  9  /*
 10  
 11    This function is called by SELECT statement within the package body. Therefore, it has to be declared in the package header.
 12  
 13  */
 14  
 15    function generate_object_weblink
 16    (
 17  	 l_object_id			   varchar2
 18    )
 19    return clob;
 20  
 21  /*
 22  
 23    This function is called by DbTwig on behalf of the DbTwig Example Web Application. All functions and procedures that are called
 24    by DbTwig have the same signature. Functions accept a JSON string of parameters and return JSON data using CLOB variables.
 25    Procedures accept a JSON string of parameters using a CLOB variable.
 26  
 27  */
 28  
 29    function get_maintenance_manual_detail
 30    (
 31  	 p_json_parameters		   json_object_t
 32    )
 33    return clob;
 34  
 35  /*
 36  
 37    This function is called by SELECT statement within the package body. Therefore, it has to be declared in the package header.
 38  
 39  */
 40  
 41    function get_major_assembly_photos
 42    (
 43  	 p_manual_id			   maintenance_manuals.manual_id%type
 44    )
 45    return clob;
 46  
 47  /*
 48  
 49    This function is called by DbTwig on behalf of the DbTwig Example Web Application.
 50  
 51  */
 52  
 53    function get_maintenance_manuals
 54    (
 55  	 p_json_parameters		   json_object_t
 56    )
 57    return clob;
 58  
 59  /*
 60  
 61    function restapi_error
 62  
 63    This function is registered with DbTwig when the dbTwigExample service is created. It is called when the
 64    DbTwig logic (in the database) detects an exception upon calling a mapped middle-tier entry-point.
 65  
 66    All error information is to be accessed by calling utl_call_stack.
 67  
 68    The returned json object shall contain an key/value pair for 'errorId' The errorId, if not null, will
 69    be concatenated by the DbTwig logic to form a string that says:
 70  
 71  	 'Please reference error ID ... when contacting support.'
 72  
 73  */
 74  
 75    function restapi_error
 76    (
 77  	 p_json_parameters		   clob,    -- The HTTP request JSON parameters, if available
 78  	 p_service_name 		   varchar2,
 79  	 p_component_name		   varchar2
 80    )
 81    return json_object_t;
 82  
 83  /*
 84  
 85    This procedure shows you how you can accept a value from your UI and insert that into the DB. Nothing too fancy here.
 86  
 87  */
 88  
 89    procedure save_tech_note
 90    (
 91  	 p_json_parameters		   json_object_t
 92    );
 93  
 94  /*
 95  
 96   This is just a placeholder procedure in order to satisfy DbTwig's requirements for a session_validation_procedure.
 97  
 98  */
 99  
100    procedure validate_session
101    (
102  	 p_entry_point			   middle_tier_map.entry_point%type,
103  	 p_json_parameters		   json_object_t
104    );
105  
106  end dbtwig_example;
107  .
SQL> /

Package created.

SQL> show errors package dbtwig_example
No errors.
SQL> @dbtwig_example.pls
SQL> create or replace
  2  package body dbtwig_example as
  3  
  4    s_api_token			   varchar2(32) := '%api-token%';	       --  Store your AsterionDB API Token here.
  5  
  6    s_asteriondb_service		   constant varchar2(10) := 'asterionDB';
  7  
  8    function call_db_twig
  9    (
 10  	 p_json_parameters		   json_object_t
 11    )
 12    return json_object_t
 13  
 14    is
 15  
 16  	 l_json_parameters		   json_object_t := p_json_parameters;
 17  
 18    begin
 19  
 20  	 l_json_parameters.put('serviceName', s_asteriondb_service);
 21  	 l_json_parameters.put('sessionId', s_api_token);
 22  
 23  	 return json_object_t(db_twig.call_restapi(l_json_parameters.to_clob));
 24  
 25    end call_db_twig;
 26  
 27    function get_number_parameter_value					       -- Parameter getter/checker w/ default value
 28    (
 29  	 p_json_parameters		   json_object_t,
 30  	 p_key				   varchar2,
 31  	 p_required_parameter		   boolean default true,		       -- Set to false to allow the parameter to not be required
 32  	 p_default_value		   number default null			       -- Set to a default value other than null when parameter is not required
 33    )
 34    return number
 35  
 36    is
 37  
 38    begin
 39  
 40  	 if p_json_parameters.has(p_key) then
 41  
 42  	   return p_json_parameters.get_number(p_key);
 43  
 44  	 else
 45  
 46  	   if p_required_parameter then
 47  
 48  	     raise_application_error(-20000, 'A required parameter was not specified.');
 49  
 50  	   else
 51  
 52  	     return p_default_value;
 53  
 54  	   end if;
 55  
 56  	 end if;
 57  
 58    end get_number_parameter_value;
 59  
 60    function get_string_parameter_value					       -- Parameter getter/checker w/ default value
 61    (
 62  	 p_json_parameters		   json_object_t,
 63  	 p_key				   varchar2,
 64  	 p_required_parameter		   boolean default true,		       -- Set to false to allow the parameter to not be required
 65  	 p_default_value		   varchar2 default null		       -- Set to a default value other than null when parameter is not required
 66    )
 67    return varchar2
 68  
 69    is
 70  
 71    begin
 72  
 73  	 if p_json_parameters.has(p_key) then
 74  
 75  	   return p_json_parameters.get_string(p_key);
 76  
 77  	 else
 78  
 79  	   if p_required_parameter then
 80  
 81  	     raise_application_error(-20000, 'A required parameter was not specified.');
 82  
 83  	   else
 84  
 85  	     return p_default_value;
 86  
 87  	   end if;
 88  
 89  	 end if;
 90  
 91    end get_string_parameter_value;
 92  
 93  /*
 94  
 95    Applications that interface to AsterionDB as an API client send and receive JSON data. Create a JSON object that will hold
 96    our parameters and make a call to DbTwig to generate a weblink.
 97  
 98  */
 99  
100    function generate_object_weblink
101    (
102  	 l_object_id			   varchar2
103    )
104    return clob
105  
106    is
107  
108  	 l_json_object			   json_object_t := json_object_t;
109  	 l_json_data			   json_object_t;
110  
111    begin
112  
113  	 l_json_object.put('entryPoint', 'generateObjectWeblink');
114  	 l_json_object.put('sessionId', s_api_token);
115  	 l_json_object.put('contentDisposition', 'STREAM');
116  	 l_json_object.put('objectId', l_object_id);
117  
118  	 l_json_data := call_db_twig(l_json_object);
119  	 return l_json_data.get_string('objectWeblink');
120  
121    end generate_object_weblink;
122  
123  ---
124  ---
125  ---
126  
127    procedure edit_spreadsheet
128    (
129  	 p_json_parameters		   json_object_t
130    )
131  
132    is
133  
134  	 l_json_object			   json_object_t;
135  	 l_spreadsheet_id		   maintenance_manuals.spreadsheet_id%type :=
136  	   get_string_parameter_value(p_json_parameters, 'spreadsheetId');
137  	 l_spreadsheet_file		   varchar2(256);
138  	 l_result			   json_object_t;
139  
140    begin
141  
142  --  Generate a filename that we can use with LibreOffice
143  
144  	 l_json_object := json_object_t;
145  	 l_json_object.put('entryPoint', 'generateObjectFilename');
146  	 l_json_object.put('sessionId', s_api_token);
147  	 l_json_object.put('gatewayName', sys_context('userenv', 'host'));
148  	 l_json_object.put('objectId', l_spreadsheet_id);
149  	 l_json_object.put('accessMode', 'U');
150  	 l_json_object.put('accessLimit', -1);
151  	 l_json_object.put('validUntil', '1 Hour');
152  	 l_json_object.put('allowTempFile', 'Y');
153  
154  	 l_result := call_db_twig(l_json_object);
155  	 l_spreadsheet_file := l_result.get_string('filename');
156  
157  --  Gotta commit this so the external process (libreoffice and DbObscura) can see our transaction...
158  
159  	 commit;
160  
161  	 l_json_object := json_object_t;
162  	 l_json_object.put('entryPoint', 'spawnHelperApplication');
163  	 l_json_object.put('sessionId', s_api_token);
164  	 l_json_object.put('gatewayName', sys_context('userenv', 'host'));
165  	 l_json_object.put('commandLine', 'libreoffice '||l_spreadsheet_file);
166  
167  	 l_result := call_db_twig(l_json_object);
168  
169    end edit_spreadsheet;
170  
171  /*
172  
173    This function is called by DbTwig on behalf of the DbTwig Example Web Application.
174  
175    We are using Oracle's built-in capabilities to generate a JSON string directly from a SELECT statement.
176  
177    Note how we are generating the assemblyPhotos item.  By embedding a function within the SELECT statement,
178    we can generate master/detail information in a single call.
179  
180    We have also provided the needed modifications as commented out SELECT items to help speed up the process
181    of converting this example so that it is accessing unstructured data from AsterionDB.
182  
183    Execute the following SQL statement to modify the maintenance_manuals table:
184  
185  	 alter table maintenance_manuals add object_id varchar2(32);
186  
187  */
188  
189    function get_maintenance_manual_detail
190    (
191  	 p_json_parameters		   json_object_t
192    )
193    return clob
194  
195    as
196  
197  	 l_manual_id			   maintenance_manuals.manual_id%type := get_number_parameter_value(p_json_parameters, 'manualId');
198  	 l_clob 			   clob;
199  
200    begin
201  
202  	 select  json_object(
203  		   'manufacturer' is manufacturer,
204  		   'inServiceFrom' is to_char(in_service_from, 'dd-MON-yyyy'),
205  		   'maintenanceDivision' is maintenance_division,
206  		   'revisionNumber' is revision_number,
207  -- 	     'maintenanceManualLink' is generate_object_weblink(object_id),
208  -- 	     'oldMaintenanceManualLink' is maintenance_manual_filename,
209  		   'maintenanceManualLink' is maintenance_manual_filename,
210  		   'spreadsheetId' is spreadsheet_id,
211  		   'assemblyPhotos' is get_major_assembly_photos(l_manual_id) format json
212  		   returning clob)
213  	   into  l_clob
214  	   from  maintenance_manuals
215  	  where  manual_id = l_manual_id;
216  
217  	 return l_clob;
218  
219    end get_maintenance_manual_detail;
220  
221  /*
222  
223    This function is called by get_maintenance_manual_detail. It will provide all of the photographs associated with
224    an mainteance manual by returning a JSON string.
225  
226    We have provided the needed modifications as commented out SELECT items to help speed up the process of converting
227    this example so that it is accessing unstructured data from AsterionDB.
228  
229    Execute the following SQL statement to modify the major_assembly_photos table:
230  
231  	 alter table major_assembly_photos add object_id varchar2(32);
232  
233  */
234  
235    function get_major_assembly_photos
236    (
237  	 p_manual_id			   maintenance_manuals.manual_id%type
238    )
239    return clob
240  
241    as
242  
243  	 l_clob 			   clob;
244  
245    begin
246  
247  	 select  json_arrayagg(json_object(
248  -- 	     'mediaLink' is generate_object_weblink(object_id),
249  -- 	     'oldMediaLink' is filename)
250  		   'mediaLink' is filename)
251  		   returning clob)
252  	   into  l_clob
253  	   from  major_assembly_photos
254  	  where  manual_id = p_manual_id;
255  
256  	 return l_clob;
257  
258    end get_major_assembly_photos;
259  
260  /*
261  
262    This function is called by DbTwig on behalf of the DbTwig Example Web Application.
263  
264    Note that even though we do not need any parameters, we still have to provide the required function/procedure signature.
265  
266  */
267  
268    function get_maintenance_manuals
269    (
270  	 p_json_parameters		   json_object_t
271    )
272    return clob
273  
274    as
275  
276  	 l_clob 			   clob;
277  
278    begin
279  
280  	 select  json_arrayagg(json_object(
281  		   'manufacturer' is manufacturer,
282  		   'manualId' is manual_id,
283  		   'inServiceFrom' is to_char(in_service_from, 'dd-MON-yyyy'))
284  		   order by manufacturer returning clob)
285  	   into  l_clob
286  	   from  maintenance_manuals;
287  
288  	 return l_clob;
289  
290    end get_maintenance_manuals;
291  
292  /*
293  
294    This function is called directly by DbTwig upon encountering an exception.
295  
296  */
297  
298    function restapi_error
299    (
300  	 p_json_parameters		   clob,    -- The HTTP request JSON parameters, if available
301  	 p_service_name 		   varchar2,
302  	 p_component_name		   varchar2
303    )
304    return json_object_t
305  
306    is
307  
308  	 l_json_request 		   json_object_t := json_object_t;
309  	 l_result			   json_object_t;
310  
311    begin
312  
313  	 l_json_request.put('entryPoint', 'restapiError');
314  	 l_json_request.put('jsonParameters', p_json_parameters);
315  	 l_json_request.put('errorInService', p_service_name);
316  	 l_json_request.put('componentName', p_component_name);
317  	 l_result := call_db_twig(l_json_request);
318  
319  	 return l_result;
320  
321    end restapi_error;
322  
323  /*
324  
325   Simple code that shows you how to unpack the parameter object and insert values into the DB.
326  
327  */
328  
329    procedure save_tech_note
330    (
331  	 p_json_parameters		   json_object_t
332    )
333  
334    is
335  
336  	 l_tech_note			   technician_notes.tech_note%type := get_string_parameter_value(p_json_parameters, 'techNote');
337  	 l_manual_id			   maintenance_manuals.manual_id%type := get_number_parameter_value(p_json_parameters, 'manualId');
338  
339    begin
340  
341  	 insert into technician_notes
342  	   (manual_id, tech_note)
343  	 values
344  	   (l_manual_id, l_tech_note);
345  
346    end save_tech_note;
347  
348  /*
349  
350   This is just a placeholder procedure in order to satisfy DbTwig's requirements  for a session_validation_procedure.
351  
352  */
353  
354    procedure validate_session
355    (
356  	 p_entry_point			   middle_tier_map.entry_point%type,
357  	 p_json_parameters		   json_object_t
358    )
359  
360    is
361  
362    begin
363  
364  	 null;
365  
366    end validate_session;
367  
368  end dbtwig_example;
369  /

Package body created.

SQL> show errors package body dbtwig_example
No errors.
SQL> 
SQL> rem
SQL> rem  Allow DbTwig to lookup our middle-tier map entries and execute our package.
SQL> rem
SQL> 
SQL> grant select on middle_tier_map to &&dbtwig_user;

Grant succeeded.

SQL> grant execute on dbtwig_example to &&dbtwig_user;

Grant succeeded.

SQL> 
SQL> spool off;
